# sudo docker login --username=木子镓 crpi-wnfek3pn2k4kqc1p.cn-chengdu.personal.cr.aliyuncs.com
# docker-compose up -d
# docker-compose build --no-cache && docker-compose up -d

services:
  # 后端服务层
  echo-api:
    build:
      context: .
    image: echo-api
    container_name: echo-api
    volumes:
      - ./config/supervisor:/etc/supervisor
      - ./api:/var/www/html
    networks:
      - echo-backend
    environment:
      - APP_ENV=${APP_ENV:-local}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  # 后端服务异步队列
  echo-api-queue:
    image: echo-api
    container_name: echo-api-queue
    command: sh -c "rm -f /var/run/supervisor.sock && supervisord -n -c /etc/supervisor/supervisord.conf"
    volumes:
      - ./config/supervisor:/etc/supervisor
      - ./api:/var/www/html
    networks:
      - echo-backend
    depends_on:
      redis:
        condition: service_started

  # 后端代理
  nginx-api:
    image: crpi-wnfek3pn2k4kqc1p.cn-chengdu.personal.cr.aliyuncs.com/lijia-images/nginx:latest
    container_name: nginx-api
    volumes:
      - ./config/nginx/conf.d/api.conf:/etc/nginx/conf.d/api.conf
      - ./api:/var/www/html
    ports:
      - "8080:8080"
    depends_on:
      - echo-api
    networks:
      - echo-backend
      - echo-frontend

  # 前端代理
  nginx-front:
    image: crpi-wnfek3pn2k4kqc1p.cn-chengdu.personal.cr.aliyuncs.com/lijia-images/nginx:latest
    container_name: nginx-front
    volumes:
      - ./config/nginx/conf.d/front.conf:/etc/nginx/conf.d/front.conf
      - ./front/dist:/var/www
    ports:
      - "80:9090"
      - "9090:9090"
    depends_on:
      - echo-api
    networks:
      - echo-frontend
    extra_hosts: # 解析到宿主机地址
      - "host.docker.internal:172.17.0.1"
    command: sh -c "cd /var/www/dist && npm install && npm run start & nginx -g 'daemon off;'"

  redis:
    image: crpi-wnfek3pn2k4kqc1p.cn-chengdu.personal.cr.aliyuncs.com/lijia-images/redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - echo-backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-Xms512m -Xmx512m  # 限制内存
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - echo-backend
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1

  mysql:
    image: crpi-wnfek3pn2k4kqc1p.cn-chengdu.personal.cr.aliyuncs.com/lijia-images/mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root@123
      MYSQL_DATABASE: echo
      MYSQL_USER: echo
      MYSQL_PASSWORD: echo@123
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - echo-backend
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 5s
      timeout: 3s
      retries: 5

  # 添加 rustfs 服务
#  rustfs:
#    image: rustfs/rustfs
#    container_name: rustfs
#    ports:
#      - "9001:9000"  # 将主机的 9001 端口映射到容器的 9000 端口
#    volumes:
#      - /data:/data  # 将主机的 /data 目录挂载到容器的 /data 目录
#    restart: always  # 设置容器始终重启（可选）

networks:
  echo-backend:
    driver: bridge
  echo-frontend:
    driver: bridge

volumes:
  mysql_data:
    driver: local
